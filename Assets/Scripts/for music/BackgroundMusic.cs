using UnityEngine;

public class BackgroundMusic : MonoBehaviour
{
    private static BackgroundMusic instance;
    private AudioSource audioSource;

    private void Awake()
    {
        if (instance == null)
        {
            instance = this;
            DontDestroyOnLoad(gameObject);
            Debug.Log("üéµ BackgroundMusic —Å–æ–∑–¥–∞–Ω!");

            audioSource = GetComponent<AudioSource>();
            if (audioSource == null)
            {
                audioSource = gameObject.AddComponent<AudioSource>();
                Debug.Log("üéµ AudioSource —Å–æ–∑–¥–∞–Ω –Ω–∞ BackgroundMusic!");
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
            AudioClip backgroundMusic = Resources.Load<AudioClip>("Audio/audio");
            if (backgroundMusic != null)
            {
                audioSource.clip = backgroundMusic;
                audioSource.loop = true;
                audioSource.playOnAwake = false;
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
                audioSource.volume = PlayerPrefs.GetFloat("BackgroundVolume", 1f);
                
                if (!audioSource.isPlaying)
                {
                    audioSource.Play();
                    Debug.Log("üéµ –ú—É–∑—ã–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!");
                }
            }
            else
            {
                Debug.LogError("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª audio.mp3 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Resources/Audio/");
            }
        }
        else
        {
            Debug.LogWarning("‚ö† `BackgroundMusic` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä!");
            Destroy(gameObject);
        }
    }

    public void SetVolume(float volume)
    {
        if (audioSource != null)
        {
            audioSource.volume = volume;
            PlayerPrefs.SetFloat("BackgroundVolume", volume);
            PlayerPrefs.Save();
            Debug.Log($"üîä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä–æ–º–∫–æ—Å—Ç—å —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏: {volume}");
        }
    }

    public void ToggleMute()
    {
        if (audioSource != null)
        {
            audioSource.mute = !audioSource.mute;
            Debug.Log(audioSource.mute ? "üîá –ú—É–∑—ã–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞!" : "üîä –ú—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞!");
        }
    }

    public bool IsMuted()
    {
        return audioSource != null && audioSource.mute;
    }
}
